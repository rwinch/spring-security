plugins {
	id 'org.springframework.security.spring-module'
}

import java.util.concurrent.Callable

// FIXME: Can we use https://imperceptiblethoughts.com/shadow/introduction/
def includeProject = project(':spring-security-crypto')

configurations {
	included
	compile.extendsFrom included
}

java {
	registerFeature("jackson") {
		usingSourceSet(sourceSets.main)
	}
	registerFeature("reactive") {
		usingSourceSet(sourceSets.main)
	}
	registerFeature("jsr250") {
		usingSourceSet(sourceSets.main)
	}
	registerFeature("ehcache") {
		usingSourceSet(sourceSets.main)
	}
	registerFeature("aspectj") {
		usingSourceSet(sourceSets.main)
	}
	registerFeature("jdbc") {
		usingSourceSet(sourceSets.main)
	}
}

configurations.testFixturesImplementation.extendsFrom configurations.jsr250Implementation
configurations.testFixturesImplementation.extendsFrom configurations.jdbcImplementation

dependencies {
	api platform(project(":spring-security-dependencies"))
	api 'org.springframework:spring-aop'
	api 'org.springframework:spring-beans'
	api 'org.springframework:spring-context'
	api 'org.springframework:spring-core'
	api 'org.springframework:spring-expression'

	included includeProject

	jacksonImplementation 'com.fasterxml.jackson.core:jackson-databind'
	reactiveImplementation 'io.projectreactor:reactor-core'
	jsr250Implementation 'javax.annotation:jsr250-api'
	ehcacheImplementation 'net.sf.ehcache:ehcache'
	aspectjImplementation 'org.aspectj:aspectjrt'
	jdbcImplementation 'org.springframework:spring-jdbc'
	jdbcImplementation 'org.springframework:spring-tx'

	testImplementation "org.powermock:powermock-core"
	testImplementation "org.powermock:powermock-api-support"
	testImplementation "org.powermock:powermock-module-junit4-common"
	testImplementation "org.powermock:powermock-module-junit4"
	testImplementation("org.powermock:powermock-api-mockito2") {
		exclude group: 'org.mockito', module: 'mockito-all'
	}
	testImplementation "org.powermock:powermock-reflect"
	testImplementation "junit:junit"
	testImplementation "org.mockito:mockito-core"
	testImplementation "org.springframework:spring-test"
	testImplementation "org.assertj:assertj-core"
	testImplementation 'commons-collections:commons-collections'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.skyscreamer:jsonassert'
	testImplementation 'org.slf4j:jcl-over-slf4j'
	testImplementation 'org.springframework:spring-test'

	testRuntime 'org.hsqldb:hsqldb'
}

task springVersion(type: org.gradle.api.tasks.WriteProperties) {
	outputFile = file("${buildDir}/versions/spring-security.versions")
	property("org.springframework:spring-core", springVersion())
}

tasks.processResources {
	into('META-INF') {
		from project.tasks.springVersion.outputs
	}
}

tasks.jar.from { includeProject.sourceSets.main.output }

tasks.sourcesJar.from {includeProject.sourceSets.main.java}

configure(project.tasks.withType(Test)) {
	doFirst {
		systemProperties['springSecurityVersion'] = version
		systemProperties['springVersion'] = springVersion().call()
	}
}

Callable<String> springVersion() {
	return  (Callable<String>) { project.configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts
    .find { it.name == 'spring-core' }.moduleVersion.id.version }
}
