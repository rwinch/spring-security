apply plugin: 'io.spring.convention.spring-sample-war'

def keystore = "$rootDir/samples/certificates/server.jks"
def password = 'password'


sourceSets {
	test.resources.exclude 'GebConfig.groovy'
	integrationTest.groovy.srcDir file('src/integration-test/groovy')
}


dependencies {
	providedCompile "javax.servlet:javax.servlet-api"

	compile project(':spring-security-core'),
			project(':spring-security-cas'),
			"org.jasig.cas.client:cas-client-core"

	runtime project(':spring-security-web'),
			project(':spring-security-config'),
			"org.springframework:spring-context-support",
			"org.slf4j:jcl-over-slf4j",
			"ch.qos.logback:logback-classic",
			"net.sf.ehcache:ehcache"

	integrationTestCompile project(':spring-security-cas'),
					seleniumDependencies,
					gebDependencies,
				   "org.eclipse.jetty:jetty-server",
				   "org.eclipse.jetty:jetty-servlet",
				   "org.codehaus.groovy:groovy",
				   "org.slf4j:jcl-over-slf4j",
				   spockDependencies
}

integrationTest.doFirst {
	def casServiceHost = jettyRunWar.httpsHost
	systemProperties['cas.server.host'] = casServer().httpsHost
	systemProperties['cas.service.host'] = casServiceHost
	systemProperties['geb.build.baseUrl'] = 'https://'+casServiceHost+'/cas-sample/'
	systemProperties['geb.build.reportsDir'] = 'build/geb-reports'
	systemProperties['jar.path'] = jar.archivePath
	systemProperties['javax.net.ssl.trustStore'] = keystore
	systemProperties['javax.net.ssl.trustStorePassword'] = password
}

gretty {
	httpsEnabled = true
	httpsPort = 8443
}

def casServerPath = ':spring-security-samples-xml-casserver:appRunWar'

task cas(dependsOn:[casServerPath,':spring-security-samples-xml-cassample:appRun']) {

}

gradle.taskGraph.whenReady { graph ->
	tasks.findByPath('appRun').shouldRunAfter tasks.findByPath(casServerPath)
	def casServerProject = findProject(':spring-security-samples-xml-casserver')
	casServerProject.gretty.daemon = true
}

//gradle.taskGraph.whenReady {graph ->
//	def casServer = casServer()
//	[casServer,jettyRunWar]*.metaClass*.getHttpsConnector {->
//		def sslSocketConnClass = jettyRunWar.class.classLoader.loadClass('org.mortbay.jetty.security.SslSocketConnector')
//		delegate.connectors.find { it in sslSocketConnClass }
//	}
//	[casServer,jettyRunWar]*.metaClass*.getHttpsHost {->
//		"localhost:"+delegate.httpsConnector.port
//	}
//	jettyRunWar.metaClass.getHttpConnector {->
//		def channelConnClass = jettyRunWar.class.classLoader.loadClass('org.mortbay.jetty.nio.SelectChannelConnector')
//		delegate.connectors.find { it in channelConnClass }
//	}
//	if (graph.hasTask(cas)) {
//		casServer.daemon = true
//	}
//	if(graph.hasTask(integrationTest)) {
//		tasks.getByPath(':spring-security-samples-xml-casserver:casServerOverlay').logLevel = 'ERROR'
//		jettyRunWar {
//			additionalRuntimeJars += file("src/integration-test/resources")
//			daemon = true
//		}
//
//		[jettyRunWar.httpConnector,jettyRunWar.httpsConnector,casServer.httpsConnector]*.metaClass*.reservePort { taskToCloseSocket ->
//			def serverSocket = new ServerSocket(0)
//			delegate.metaClass.serverSocket = serverSocket
//			delegate.port = serverSocket.localPort
//			taskToCloseSocket.doFirst {
//				serverSocket.close()
//			}
//		}
//
//		[jettyRunWar.httpConnector,jettyRunWar.httpsConnector]*.reservePort(jettyRunWar)
//		jettyRunWar.httpConnector.confidentialPort = jettyRunWar.httpsConnector.port
//		casServer.httpsConnector.reservePort(casServer)
//	}
//}
//
//def casServer() {
//	tasks.getByPath(':spring-security-samples-xml-casserver:casServer')
//}
